{"version":3,"file":"static/js/885.46937528.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  z-index: 999;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderContainer>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderContainer>\n  );\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieList = styled.ul`\n  padding-left: 50px;\n`;\n\nexport const MovieItem = styled.li`\n  & a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  color: black;\n  font-size: 18px;\n  line-height: 1.5;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-bottom 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #2196f3;\n    border-bottom: 2px solid #2196f3;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieList, MovieItem, MovieLink } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MovieList>\n      {movies.map(({ id, title }) => (\n        <MovieItem key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </MovieList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  margin-top: 20px;\n  margin-bottom: 20px;\n\n  display: flex;\n  justify-content: center;\n  gap: 30px;\n`;\n\nexport const SearchFormInput = styled.input`\n  width: 250px;\n  font-size: 18px;\n  padding: 5px 12px;\n\n  border: 1px solid #2196f3;\n  border-radius: 6px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n`;\n\nexport const SearchFormButton = styled.button`\n  cursor: pointer;\n\n  width: 100%;\n  max-width: 120px;\n  // height: 30px;\n  padding: 2px 5px;\n\n  color: #010101;\n  font-size: 18px;\n  font-weight: 500;\n  background-color: #79caea;\n\n  border: none;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.24) 8px 8px 5px 0px;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #fff;\n    background-color: #9bd6ee;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  SearchForm,\n  SearchFormInput,\n  SearchFormButton,\n} from './Searchbar.styled';\n\nconst Searchbar = ({ onSubmit, movieName }) => {\n  const [searchQuery, setSearchQuery] = useState(movieName);\n\n  // Обробник для інпуту, відповідає за оновлення state searchQuery\n  const handleInputChange = event => {\n    setSearchQuery(event.currentTarget.value);\n  };\n\n  // Викликається під час submit - пошуку\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Відміняємо пошук по пустій стрічці\n    if (searchQuery.trim() === '') {\n      alert('Hello! :-)) Finally enter your search query!');\n      return;\n    }\n    // Передаємо через prop значення searchQuery в Movies\n    onSubmit(searchQuery);\n\n    // Очистка після submit\n    // setSearchQuery('');\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          value={searchQuery}\n          onChange={handleInputChange}\n        />\n        <SearchFormButton type=\"submit\">Search</SearchFormButton>\n      </SearchForm>\n    </>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movieName: PropTypes.string.isRequired,\n};\n\nexport default Searchbar;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 20px;\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieByName } from 'services/themoviedbAPI';\nimport Loader from 'components/Loader';\nimport MoviesList from 'components/MoviesList';\nimport Searchbar from 'components/Searchbar';\nimport { Section } from './Movies.styled';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  // Читаємо назву фільму з URL\n  const movieName = searchParams.get('name') ?? '';\n\n  // Запит на пошук фільму за ключовим словом\n  useEffect(() => {\n    if (!movieName) return;\n\n    const gethMovieByName = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieByName(movieName);\n        if (!response.total_results) {\n          setSearchMovies([]); // Очистка масиву фільмів\n          throw new Error('No data! :-(');\n        }\n        setSearchMovies(response.results); // Записуємо в стейт results\n      } catch (errorCaught) {\n        setError(errorCaught);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    gethMovieByName();\n  }, [movieName]);\n\n  // Функція для обробки пошукового запиту форми, передана пропсом в Searchbar\n  const handleFormSubmit = searchQuery => {\n    if (!searchQuery) {\n      setSearchParams({});\n      setSearchMovies([]);\n      return;\n    }\n    // Записуємо назву фільму (searchQuery) з Searchbar в URL\n    setSearchParams({ name: searchQuery });\n    setError('');\n  };\n\n  return (\n    <Section>\n      <Searchbar onSubmit={handleFormSubmit} movieName={movieName} />\n      {/* Пропс movieName - для збереження пошукового запиту (патерн), коли користувач перейшов по збереженому раніше посиланню URL в новій вкладці браузера*/}\n\n      {isLoading && <Loader />}\n\n      {error && <p>Ooops... Sorry!!! Nothing was found for your query!</p>}\n\n      <MoviesList movies={searchMovies} />\n    </Section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = '4bf150e89573609a4e50188ee97df75b';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'day'; // week\nconst LANGUAGE = 'en-US';\n\n// Запит на трендові фільми\nexport async function fetchTrendMovies() {\n  const response = await axios.get(\n    `${BASE_URL}/3/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит на пошук фільму за ключовим словом\nexport async function fetchMovieByName(searchQuery) {\n  const response = await axios.get(\n    `${BASE_URL}/3/search/${MEDIA_TYPE}?api_key=${API_KEY}&language=${LANGUAGE}&query=${searchQuery}&page=1&include_adult=false`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит повної інформації про фільм за Id\nexport async function fetchMovieById(id) {\n  const response = await axios.get(\n    `${BASE_URL}/3/${MEDIA_TYPE}/${id}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит на акторський склад (Cast) фільму за Id\nexport async function fetchMovieCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}/3/${MEDIA_TYPE}/${id}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит відгуків (Reviews) про фільм за Id\nexport async function fetchMovieReviews(id) {\n  const response = await axios.get(\n    `${BASE_URL}/3/${MEDIA_TYPE}/${id}/reviews?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n"],"names":["LoaderContainer","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","MovieList","MovieItem","MovieLink","Link","movies","location","useLocation","map","id","title","to","state","from","SearchForm","SearchFormInput","SearchFormButton","onSubmit","movieName","useState","searchQuery","setSearchQuery","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","Section","searchMovies","setSearchMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","gethMovieByName","fetchMovieByName","response","total_results","Error","results","name","MoviesList","BASE_URL","API_KEY","MEDIA_TYPE","LANGUAGE","fetchTrendMovies","axios","status","data","fetchMovieById","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}