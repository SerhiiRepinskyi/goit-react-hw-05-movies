{"version":3,"file":"static/js/93.ab083cf4.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  width: 160px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/themoviedbAPI';\nimport Loader from 'components/Loader';\nimport { FaPortrait } from 'react-icons/fa';\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Запит на акторський склад (Cast) фільму по Id\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getMovieCast = async movieId => {\n      setIsLoading(true);\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        if (!cast.length) {\n          throw new Error('No data! :-(');\n        }\n        setMovieCast(cast); // Записуємо в стейт масив обєктів\n      } catch (errorCaught) {\n        setError(errorCaught);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We don't have information about the cast of this movie.</p>}\n\n      <CastList>\n        {movieCast.map(({ id, profile_path, name, character }) => (\n          <CastItem key={id}>\n            {profile_path ? (\n              <div>\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                  alt={name}\n                />\n              </div>\n            ) : (\n              <FaPortrait\n                // style={{ display: 'block', width: '100%' }}\n                style={{ display: 'block', width: '160px', height: '240px' }}\n                color=\"rgb(120, 115, 115)\"\n                // size={250}\n              />\n            )}\n            <p>\n              <b>{name}</b>\n            </p>\n            <p>Character: {character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  z-index: 999;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderContainer>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderContainer>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = '4bf150e89573609a4e50188ee97df75b';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'day'; // week\nconst LANGUAGE = 'en-US';\n\n// Запит на трендові фільми\nexport async function fetchTrendMovies() {\n  const response = await axios.get(\n    `${BASE_URL}/3/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит на пошук фільму за ключовим словом\nexport async function fetchMovieByName(searchQuery) {\n  const response = await axios.get(\n    `${BASE_URL}/3/search/${MEDIA_TYPE}?api_key=${API_KEY}&language=${LANGUAGE}&query=${searchQuery}&page=1&include_adult=false`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит повної інформації про фільм за Id\nexport async function fetchMovieById(id) {\n  const response = await axios.get(\n    `${BASE_URL}/3/${MEDIA_TYPE}/${id}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит на акторський склад (Cast) фільму за Id\nexport async function fetchMovieCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}/3/${MEDIA_TYPE}/${id}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n\n// Запит відгуків (Reviews) про фільм за Id\nexport async function fetchMovieReviews(id) {\n  const response = await axios.get(\n    `${BASE_URL}/3/${MEDIA_TYPE}/${id}/reviews?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (!response.status) {\n    throw new Error(response.status);\n  }\n  return response.data;\n}\n"],"names":["CastList","styled","CastItem","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","useEffect","getMovieCast","fetchMovieCast","cast","length","Error","Loader","map","id","profile_path","name","character","src","alt","style","display","width","height","color","LoaderContainer","strokeColor","strokeWidth","animationDuration","visible","BASE_URL","API_KEY","MEDIA_TYPE","LANGUAGE","fetchTrendMovies","axios","response","status","data","fetchMovieByName","searchQuery","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}